
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Software
 */
public class StudentGUI extends javax.swing.JFrame {

    /**
     * Creates new form StudentGUI
     */
    private DefaultTableModel tableModel;

    public StudentGUI() {
        initComponents();

        // Step 1: Create new model with checkbox column
        tableModel = new DefaultTableModel(new Object[]{"Select", "ID", "Name", "Age", "Course"}, 0) {
            @Override
            public Class<?> getColumnClass(int column) {
                if (column == 0) {
                    return Boolean.class;
                }
                return super.getColumnClass(column);
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 0; // Only the checkbox column is editable
            }
        };

        // Step 2: Set the new model to the table
        tableStudents.setModel(tableModel);

        // Step 3: Set up selection model to auto-fill input fields
        tableStudents.setSelectionModel(new DefaultListSelectionModel() {
            @Override
            public void setSelectionInterval(int index0, int index1) {
                if (index0 >= 0) {
                    super.setSelectionInterval(index0, index1);
                    int selectedRow = tableStudents.getSelectedRow();
                    if (selectedRow >= 0) {
                        // Column indices are now correct (0 = Select, 1 = ID, 2 = Name, 3 = Age, 4 = Course)
                        txtID.setText(tableStudents.getValueAt(selectedRow, 1).toString());
                        txtName.setText(tableStudents.getValueAt(selectedRow, 2).toString());
                        txtAge.setText(tableStudents.getValueAt(selectedRow, 3).toString());
                        txtCourse.setText(tableStudents.getValueAt(selectedRow, 4).toString());
                    }
                }
            }
        });

        // Initialize the table with data
        btnRefreshActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblCourse = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        lblSearch = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        tableStudents = new javax.swing.JTable();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        txtCourse = new javax.swing.JTextField();
        btnExport = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnBulkDelete = new javax.swing.JButton();
        btnSelectAll = new javax.swing.JButton();
        btnDeselectAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Management System");

        jLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 24)); // NOI18N
        jLabel1.setText("Student Management System");

        lblID.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblID.setText("ID:");

        lblName.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblName.setText("Name:");

        lblAge.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblAge.setText("Age:");

        lblCourse.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblCourse.setText("Course:");

        btnAdd.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblSearch.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblSearch.setText("Search:");

        tableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Course"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableScrollPane.setViewportView(tableStudents);

        txtID.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        txtName.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        txtAge.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        txtSearch.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        txtCourse.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        btnExport.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnExport.setText("Export to CSV");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnImport.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnImport.setText("Import CSV");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnBulkDelete.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnBulkDelete.setText("Bulk Delete");
        btnBulkDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBulkDeleteActionPerformed(evt);
            }
        });

        btnSelectAll.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnSelectAll.setText("Select All");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        btnDeselectAll.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        btnDeselectAll.setText("Deselect All");
        btnDeselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeselectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnSelectAll)
                .addGap(18, 18, 18)
                .addComponent(btnBulkDelete)
                .addGap(18, 18, 18)
                .addComponent(btnDeselectAll)
                .addGap(51, 51, 51)
                .addComponent(btnExport)
                .addGap(18, 18, 18)
                .addComponent(btnImport)
                .addGap(0, 34, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblID)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblAge)
                                            .addComponent(lblName))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtID, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtName)
                                            .addComponent(txtAge)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblCourse)
                                            .addComponent(lblSearch))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtSearch)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnSearch))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnAdd)
                                                .addGap(50, 50, 50)
                                                .addComponent(btnUpdate)
                                                .addGap(57, 57, 57)
                                                .addComponent(btnDelete)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnRefresh))
                                            .addComponent(txtCourse))))
                                .addGap(77, 77, 77))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tableScrollPane)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(184, 184, 184))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAge))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCourse))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(lblSearch))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExport)
                    .addComponent(btnBulkDelete)
                    .addComponent(btnSelectAll)
                    .addComponent(btnDeselectAll)
                    .addComponent(btnImport))
                .addGap(18, 18, 18)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            String name = txtName.getText().trim();
            int age = Integer.parseInt(txtAge.getText().trim());
            String course = txtCourse.getText().trim();

            // Validation
            if (name.isEmpty() || course.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "Name and Course are required!",
                        "Validation Error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Add to database
            StudentDAO.addStudent(new Student(0, name, age, course));

            // Refresh and clear
            btnRefreshActionPerformed(evt);
            clearFields();

            JOptionPane.showMessageDialog(this,
                    "Student added successfully!",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid age (numbers only)",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error adding student: " + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            if (txtID.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "Please select a student to update",
                        "No Selection",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            int id = Integer.parseInt(txtID.getText().trim());
            String name = txtName.getText().trim();
            int age = Integer.parseInt(txtAge.getText().trim());
            String course = txtCourse.getText().trim();

            // Validation
            if (name.isEmpty() || course.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "Name and Course cannot be empty",
                        "Validation Error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Update database
            StudentDAO.updateStudent(new Student(id, name, age, course));

            // Refresh and clear
            btnRefreshActionPerformed(evt);
            clearFields();

            JOptionPane.showMessageDialog(this,
                    "Student updated successfully!",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                    "Please check ID and Age (must be numbers)",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error updating student: " + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            if (txtID.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "Please select a student to delete",
                        "No Selection",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            int id = Integer.parseInt(txtID.getText().trim());

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete this student?",
                    "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                StudentDAO.deleteStudent(id);
                btnRefreshActionPerformed(evt);
                clearFields();

                JOptionPane.showMessageDialog(this,
                        "Student deleted successfully!",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid student ID",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error deleting student: " + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        try {
            List<Student> students = StudentDAO.getAllStudents();
            tableModel.setRowCount(0); // Clear existing data

            for (Student student : students) {
                tableModel.addRow(new Object[]{
                    Boolean.FALSE, // Checkbox
                    student.getId(),
                    student.getName(),
                    student.getAge(),
                    student.getCourse()
                });
            }

            // Reset highlights if any
            tableStudents.setDefaultRenderer(Object.class, tableStudents.getDefaultRenderer(Object.class));
            tableStudents.repaint();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Failed to load students: " + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyword = txtSearch.getText().trim();

        // If search field is empty, refresh to show all students
        if (keyword.isEmpty()) {
            btnRefreshActionPerformed(evt);
            return;
        }

        try {
            // Get search results
            List<Student> results = StudentDAO.searchStudents(keyword);

            // Update table model
            tableModel.setRowCount(0);
            for (Student student : results) {
                tableModel.addRow(new Object[]{
                    Boolean.FALSE, // Checkbox
                    student.getId(),
                    student.getName(),
                    student.getAge(),
                    student.getCourse()
                });
            }

            // Show feedback
            if (results.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "No students found matching: " + keyword,
                        "No Results",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                highlightSearchMatches(keyword);  // Optional highlighting
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Search error: " + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

// Optional: Highlight matching cells
    private void highlightSearchMatches(String keyword) {
    tableStudents.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            
            Component c = super.getTableCellRendererComponent(
                table, value, isSelected, hasFocus, row, column);
            
            if (column >= 2 && value != null) {
                String cellText = value.toString().toLowerCase();
                
                if (cellText.contains(keyword.toLowerCase())) {
                    // Use FlatLaf's selection colors for consistency
                    Color highlightBg = UIManager.getColor("Table.selectionBackground");
                    Color highlightFg = UIManager.getColor("Table.selectionForeground");
                    
                    // Slightly modify the color for distinction
                    if (highlightBg != null) {
                        highlightBg = highlightBg.darker();
                        c.setBackground(highlightBg);
                        c.setForeground(highlightFg != null ? highlightFg : Color.WHITE);
                    } else {
                        // Fallback colors
                        c.setBackground(new Color(75, 110, 175));
                        c.setForeground(Color.WHITE);
                    }
                    
                    c.setFont(c.getFont().deriveFont(Font.BOLD));
                } else if (!isSelected) {
                    // Use alternating row colors
                    Color alternate = UIManager.getColor("Table.alternateRowColor");
                    if (alternate != null && row % 2 == 1) {
                        c.setBackground(alternate);
                    } else {
                        c.setBackground(table.getBackground());
                    }
                    c.setForeground(table.getForeground());
                    c.setFont(table.getFont());
                }
            }
            return c;
        }
    });
    tableStudents.repaint();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                StudentDAO.exportToCSV(fileChooser.getSelectedFile());
                JOptionPane.showMessageDialog(this, "Export successful!");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Export failed: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files", "csv"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                StudentDAO.importFromCSV(fileChooser.getSelectedFile());
                btnRefreshActionPerformed(null);
                JOptionPane.showMessageDialog(this, "Import successful!");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Import failed: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnBulkDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBulkDeleteActionPerformed
        List<Integer> idsToDelete = new ArrayList<>();

        // Collect selected IDs
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if ((Boolean) tableModel.getValueAt(i, 0)) {
                idsToDelete.add((Integer) tableModel.getValueAt(i, 1));
            }
        }

        if (idsToDelete.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "No students selected for deletion",
                    "No Selection",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete " + idsToDelete.size() + " selected students?",
                "Confirm Bulk Delete",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                int successCount = 0;
                int failCount = 0;

                for (int id : idsToDelete) {
                    try {
                        StudentDAO.deleteStudent(id);
                        successCount++;
                    } catch (SQLException ex) {
                        failCount++;
                        System.err.println("Failed to delete student ID " + id + ": " + ex.getMessage());
                    }
                }

                // Refresh and show results
                btnRefreshActionPerformed(evt);
                clearFields();

                String message = "Deleted " + successCount + " students successfully.";
                if (failCount > 0) {
                    message += "\nFailed to delete " + failCount + " students.";
                }

                JOptionPane.showMessageDialog(this,
                        message,
                        "Bulk Delete Results",
                        failCount > 0 ? JOptionPane.WARNING_MESSAGE : JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Error during bulk delete: " + ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnBulkDeleteActionPerformed

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            tableModel.setValueAt(true, i, 0);
        }
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnDeselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeselectAllActionPerformed
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            tableModel.setValueAt(false, i, 0);
        }
    }//GEN-LAST:event_btnDeselectAllActionPerformed

    private void clearFields() {
        txtID.setText("");
        txtName.setText("");
        txtAge.setText("");
        txtCourse.setText("");
        txtSearch.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Set theme before creating the JFrame
        // FlatIntelliJLaf.setup(); // Light theme
        FlatDarkLaf.setup(); // Dark theme
        // FlatMacDarkLaf.setup(); // macOS Dark

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBulkDelete;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeselectAll;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTable tableStudents;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCourse;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
